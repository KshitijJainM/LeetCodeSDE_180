-----------------------------------------------PROBLEM-------------------------------------------

Given a collection of intervals, merge all overlapping intervals.

------Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

------Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

https://leetcode.com/problems/merge-intervals/
---------------------------------------------MY SOLUTION-----------------------------------------

   vector<vector<int>> merge(vector<vector<int>>& intervals) {
       int i, n=intervals.size(), ind=0;
        if(!n)
            return {};
        vector<vector<int>> ans={};
        sort(intervals.begin(), intervals.end(), sortcol);
        ans.push_back({intervals[0][0], intervals[0][1]});
        for(i=1; i<n; i++){
            if(intervals[i][0]<=ans[ind][1])
                ans[ind][1]=max(intervals[i][1], ans[ind][1]);
            else{
                ans.push_back({intervals[i][0], intervals[i][1]});
                ind++;
            }
        }
        return ans;
    }
    
---------------------------------------MOST OPTIMIZED SOLUTION-----------------------------------