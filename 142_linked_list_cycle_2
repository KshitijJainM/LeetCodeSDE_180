-----------------------------------------------PROBLEM-------------------------------------------

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

https://leetcode.com/problems/linked-list-cycle-ii/

---------------------------------------------MY SOLUTION-----------------------------------------

ListNode *detectCycle(ListNode *head) {
        
        ListNode* slow=head;
        ListNode*fast=head;
        bool iscycle = false;
        while(fast!=NULL)
        {
            slow=slow->next;
            if(fast->next == NULL)   break;
            fast=fast->next->next;
            if(slow == fast)
            {
                iscycle = true;
                break;
            }
        }
        
        if(iscycle)
        {
            fast = head;
            while(fast!=slow)
            {
                fast=fast->next;
                slow=slow->next;
            }
            return slow;
        }
        return NULL;
    }
---------------------------------------MOST OPTIMIZED SOLUTION-----------------------------------

Similar!!!!
Since i solved the duplicate sum problem first so i know the floyds algorithm, bitch!!